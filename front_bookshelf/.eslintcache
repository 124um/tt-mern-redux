[{"C:\\workspace\\bookshelf\\front_bookshelf\\src\\index.js":"1","C:\\workspace\\bookshelf\\front_bookshelf\\src\\App.js":"2","C:\\workspace\\bookshelf\\front_bookshelf\\src\\reportWebVitals.js":"3","C:\\workspace\\bookshelf\\front_bookshelf\\src\\containers\\ShelfComponents\\BookDetail.js":"4","C:\\workspace\\bookshelf\\front_bookshelf\\src\\containers\\ShelfComponents\\BooksList.js":"5","C:\\workspace\\bookshelf\\front_bookshelf\\src\\containers\\BookShelfContainer.js":"6","C:\\workspace\\bookshelf\\front_bookshelf\\src\\actions\\actions.js":"7","C:\\workspace\\bookshelf\\front_bookshelf\\src\\constants\\actionType.js":"8","C:\\workspace\\bookshelf\\front_bookshelf\\src\\middleware\\api.js":"9","C:\\workspace\\bookshelf\\front_bookshelf\\src\\store\\configureStore.js":"10","C:\\workspace\\bookshelf\\front_bookshelf\\src\\reducers\\index.js":"11","C:\\workspace\\bookshelf\\front_bookshelf\\src\\components\\Alerts.js":"12","C:\\workspace\\bookshelf\\front_bookshelf\\src\\components\\ModalOperations.js":"13"},{"size":453,"mtime":1611752107871,"results":"14","hashOfConfig":"15"},{"size":321,"mtime":1611761430327,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":499162500000,"results":"17","hashOfConfig":"15"},{"size":1136,"mtime":1611816889685,"results":"18","hashOfConfig":"15"},{"size":1723,"mtime":1611816839951,"results":"19","hashOfConfig":"15"},{"size":6213,"mtime":1611821494373,"results":"20","hashOfConfig":"15"},{"size":3801,"mtime":1611820315720,"results":"21","hashOfConfig":"15"},{"size":1210,"mtime":1611819872113,"results":"22","hashOfConfig":"15"},{"size":659,"mtime":1611761469282,"results":"23","hashOfConfig":"15"},{"size":284,"mtime":1611760813334,"results":"24","hashOfConfig":"15"},{"size":3981,"mtime":1611821239373,"results":"25","hashOfConfig":"15"},{"size":440,"mtime":1611782439151,"results":"26","hashOfConfig":"15"},{"size":3468,"mtime":1611819104516,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"5iu1a",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":3,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"30"},"C:\\workspace\\bookshelf\\front_bookshelf\\src\\index.js",[],["62","63"],"C:\\workspace\\bookshelf\\front_bookshelf\\src\\App.js",[],"C:\\workspace\\bookshelf\\front_bookshelf\\src\\reportWebVitals.js",[],["64","65"],"C:\\workspace\\bookshelf\\front_bookshelf\\src\\containers\\ShelfComponents\\BookDetail.js",["66"],"  \r\nimport React from 'react'\r\nimport { ListGroup, ListGroupItem, Badge  } from 'reactstrap'\r\nimport config from \"../../config/dev.env.json\"\r\nconst { STATIC_IMAGES_URL } = config\r\n\r\nclass BookDetail extends React.Component {\r\n    render(){\r\n        const { bookInfo , cover } = this.props\r\n        \r\n        if(bookInfo.id !== undefined){\r\n            return(\r\n                <ListGroup style={{marginTop : 50}}>\r\n                    <ListGroupItem>\r\n                        <h4><Badge color=\"info\">Title</Badge></h4>\r\n                        {bookInfo.title}\r\n                    </ListGroupItem>\r\n                    <ListGroupItem>\r\n                        <h4><Badge color=\"info\">Description</Badge></h4>\r\n                        {bookInfo.title}\r\n                        {bookInfo.description}\r\n                    </ListGroupItem>\r\n                    <ListGroupItem>\r\n                        <img width=\"400\" src={ STATIC_IMAGES_URL + cover.name} />\r\n                    </ListGroupItem>\r\n                </ListGroup>\r\n            )\r\n        }else{ \r\n            return null\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default BookDetail\r\n","C:\\workspace\\bookshelf\\front_bookshelf\\src\\containers\\ShelfComponents\\BooksList.js",["67","68"],"import React from 'react';\r\nimport { ListGroupItem , ListGroup, Col, Row } from 'reactstrap';\r\nimport config from \"../../config/dev.env.json\"\r\nconst { STATIC_IMAGES_URL } = config\r\n\r\nconst BooksList = ({ bookListData, coversData, onSelect }) => {\r\n\r\n    const bookList = (bookListData, onSelect) => {\r\n        return (\r\n                <ListGroup className=\"overflow-y-hight-96pr\">\r\n                    <Row>\r\n                    {bookListData.map(book => {\r\n                        return (\r\n                            <Col key={\"Col\" + book.id }>\r\n                                <ListGroupItem key={\"BookGroupItem\" + book.id } color=\"info\"\r\n                                    onClick={() => onSelect(book.id)}\r\n                                >\r\n                                    <Row>\r\n                                        <h5  style={{marginLeft: 10}}>{book.title}</h5>\r\n                                        <img width=\"20\" style={styleImagePreview} src={ STATIC_IMAGES_URL + coversData.find( cover => cover.id == book.coverId ).name} />\r\n                                    </Row>                                        \r\n                                </ListGroupItem>\r\n                            </Col>\r\n                        )\r\n                    })\r\n                    }\r\n                    </Row>\r\n                </ListGroup>\r\n        )\r\n    } \r\n\r\n    if(bookListData.length !== undefined && coversData.length !== undefined){\r\n        return (\r\n            <>\r\n                {bookList( bookListData, onSelect )}\r\n            </>\r\n        );\r\n    }else{\r\n        return null\r\n    }\r\n}\r\n\r\nexport default BooksList;\r\n\r\nconst styleImagePreview = {\r\n    display: \"block\",\r\n    marginLeft: \"15%\"\r\n}","C:\\workspace\\bookshelf\\front_bookshelf\\src\\containers\\BookShelfContainer.js",["69","70","71","72","73"],"import React from 'react';\r\nimport { connect } from 'react-redux'\r\n// import booksTestData from \"../data/books.json\"\r\n// import coverTestData from \"../data/covers.json\"\r\nimport { Badge, Row, Button } from 'reactstrap';\r\nimport BooksList from \"./ShelfComponents/BooksList\"\r\nimport BookDetail from \"./ShelfComponents/BookDetail\"\r\nimport { fetchBooks, postBook, patchBook, deleteBook, fetchCovers } from \"../actions/actions\";\r\nimport Alert from \"../components/Alerts\"\r\nimport ModalOperations from \"../components/ModalOperations\"\r\n\r\nclass BookShelfContainer extends React.Component {\r\n\r\n    state = {\r\n        currentBook : {},\r\n        currentCover: {},\r\n        booksData : [],\r\n        coversData: [],\r\n        modalOperationsVisible: false,\r\n        modalOperationsType: \"\",\r\n        alert: { alertText: \"\", alertColor: \"\" },\r\n        alertVisible: false,\r\n        disabledButton: true\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.fetchBooks()\r\n        this.props.fetchCovers()\r\n    }\r\n\r\n    setBook = (currentBookId) => {\r\n        this.setState({\r\n            currentBook : this.props.books.res.find(book => book.id == currentBookId),\r\n        })\r\n    }\r\n\r\n    setCover = (coverId) => {\r\n        this.setState({\r\n            currentCover : this.props.covers.res.find(cover => cover.id == coverId)\r\n        })\r\n    }\r\n\r\n    postNewBook = (newInfo) => {\r\n        const req = {\r\n            title: newInfo.title,\r\n            description : newInfo.description,\r\n            // coverId : newInfo.coverId\r\n        }      \r\n        this.props.postBook(req)\r\n        this.workWithAlert(\r\n            true,\r\n            \"Book added to the shelf - success!\",\r\n            \"success\"\r\n        )\r\n        this.setState({ modalOperationsVisible: false })\r\n    }\r\n\r\n    patchBook = (newInfo) => {\r\n        const req = {\r\n            id: this.state.currentBook.id,\r\n            title: newInfo.title == undefined ? this.state.currentBook.title : newInfo.title,\r\n            description : newInfo.description == undefined ? this.state.currentBook.description : newInfo.description,\r\n            // coverId : newInfo.coverId == undefined ? this.state.currentBook.coverId : newInfo.coverId\r\n        }\r\n        this.props.patchBook(req) \r\n        this.workWithAlert(\r\n            true,\r\n            \"Book edited to the shelf - success!\",\r\n            \"success\"\r\n        )\r\n        this.setState({ modalOperationsVisible: false })\r\n    }\r\n    \r\n    deleteBook = () => {\r\n        this.props.deleteBook(this.state.currentBook.id)\r\n        this.workWithAlert(\r\n            true,\r\n            \"Book deleted to the shelf - success!\",\r\n            \"success\"\r\n        )\r\n        this.setState({ modalOperationsVisible: false })\r\n    }\r\n\r\n    handleClick = async (currentBookId) => {\r\n        await this.setBook(currentBookId)\r\n        await this.setCover(this.state.currentBook.coverId)\r\n        if(currentBookId){\r\n            this.setState({ disabledButton: false})\r\n        }\r\n    }\r\n\r\n    handleClickButton = (type) => {\r\n        this.setState({\r\n            modalOperationsType: type,\r\n            modalOperationsVisible: true\r\n        })\r\n    }\r\n\r\n    submitInModal = (type, newInfo) => {\r\n        switch(type) {\r\n            case \"new\": this.postNewBook(newInfo)\r\n                break   \r\n            case \"edit\": this.patchBook(newInfo)\r\n                break  \r\n            case \"remove\": this.deleteBook()\r\n                break  \r\n        }\r\n    }\r\n\r\n    workWithAlert = (alertVisible, alertText, alertColor) => {\r\n        this.setState({\r\n            alertVisible: alertVisible,\r\n            alert: {\r\n                alertText: alertText,\r\n                alertColor: alertColor,\r\n            },\r\n        })\r\n    }\r\n\r\n    render(){\r\n        const {currentBook, currentCover, alertVisible, modalOperationsVisible, modalOperationsType, disabledButton, alert} = this.state\r\n        const {books , covers} = this.props\r\n        \r\n        return(\r\n            <>\r\n                <Alert\r\n                    alertVisible={alertVisible}\r\n                    alertText={alert.alertText}\r\n                    alertColor={alert.alertColor}\r\n                    toggle={(id) => this.setState({ [id]: ![id] })}\r\n                />\r\n                <ModalOperations\r\n                    isOpen={modalOperationsVisible}\r\n                    toggle={(id) => this.setState({ [id]: ![id] })}\r\n                    modalOperationsType={modalOperationsType}\r\n                    bookInfo={currentBook}\r\n                    currentCover={currentCover}\r\n                    onApply={this.submitInModal}\r\n                />\r\n                <div style={{margin: 50}}>\r\n                    <Row style={{marginBottom: 50, marginLeft: 0}}>\r\n                        <h1><Badge color=\"warning\">This is books shelf!</Badge></h1>\r\n                        <Button onClick={() => this.handleClickButton(\"new\")} style={styleButton} color=\"primary\" outline >Add New book +</Button>\r\n                        <Button disabled={disabledButton} onClick={() => this.handleClickButton(\"edit\")} style={styleButton} color=\"primary\" outline >Edit book</Button>\r\n                        <Button disabled={disabledButton} onClick={() => this.handleClickButton(\"remove\")} style={styleButton} color=\"primary\" outline >Remove book</Button>\r\n                    </Row>\r\n                    <BooksList bookListData={books.res} coversData={covers.res} onSelect={this.handleClick} />\r\n                    <BookDetail bookInfo={currentBook} cover={currentCover} />\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, props) => {\r\n    return {\r\n        books: state.books,\r\n        covers: state.covers\r\n    }   \r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        fetchBooks: () => dispatch(fetchBooks()),\r\n        postBook: (data) => dispatch(postBook(data)),\r\n        patchBook: (data) => dispatch(patchBook(data)),\r\n        deleteBook: (id) => dispatch(deleteBook(id)),\r\n        fetchCovers: () => dispatch(fetchCovers())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(BookShelfContainer)\r\n\r\nconst styleButton = {\r\n    marginLeft: 20, \r\n    marginTop: 6, \r\n    height: 45 \r\n}","C:\\workspace\\bookshelf\\front_bookshelf\\src\\actions\\actions.js",["74","75","76"],"import * as actionTypes from '../constants/actionType'\r\nimport { jsonApi } from '../middleware/api'\r\n\r\nexport const fetchBooksLoading = () => {\r\n    return {\r\n        type: actionTypes.FETCH_BOOKS_LOADING\r\n    }\r\n}\r\n\r\nexport const fetchBooksSuccess = (books) => {    \r\n    return {\r\n        type: actionTypes.FETCH_BOOKS_SUCCESS,\r\n        books\r\n    }\r\n}\r\n\r\nexport const fetchBooksFailure = (error) => {\r\n    return {\r\n        type: actionTypes.FETCH_BOOKS_FAILURE,\r\n        error\r\n    }\r\n}\r\n\r\nexport const fetchBooks = () => {\r\n    return dispatch => {\r\n        dispatch(fetchBooksLoading())\r\n        jsonApi(`books/`)\r\n            .then(res => {\r\n                dispatch(fetchBooksSuccess(res))\r\n            })\r\n            .catch(error => {\r\n                dispatch(fetchBooksFailure(error.message))\r\n            })\r\n    }\r\n}\r\n\r\nexport const postBooksLoading = () => {\r\n    return {\r\n        type: actionTypes.POST_BOOK_LOADING\r\n    }\r\n}\r\n\r\nexport const postBooksSuccess = (books) => {    \r\n    return {\r\n        type: actionTypes.POST_BOOK_SUCCESS,\r\n        books\r\n    }\r\n}\r\n\r\nexport const postBooksFailure = (error) => {\r\n    return {\r\n        type: actionTypes.POST_BOOK_FAILURE,\r\n        error\r\n    }\r\n}\r\n\r\nexport const postBooks = () => {\r\n    return dispatch => {\r\n        dispatch(postBooksLoading())\r\n        jsonApi(`books/`, \"POST\", data)\r\n            .then(res => {\r\n                dispatch(postBooksSuccess(res))\r\n            })\r\n            .catch(error => {\r\n                dispatch(postBooksFailure(error.message))\r\n            })\r\n    }\r\n}\r\n\r\nexport const patchBooksLoading = () => {\r\n    return {\r\n        type: actionTypes.PATCH_BOOK_LOADING\r\n    }\r\n}\r\n\r\nexport const patchBooksSuccess = (books) => {    \r\n    return {\r\n        type: actionTypes.PATCH_BOOK_SUCCESS,\r\n        books\r\n    }\r\n}\r\n\r\nexport const patchBooksFailure = (error) => {\r\n    return {\r\n        type: actionTypes.PATCH_BOOK_FAILURE,\r\n        error\r\n    }\r\n}\r\n\r\nexport const patchBooks = () => {\r\n    return dispatch => {\r\n        dispatch(patchBooksLoading())\r\n        jsonApi(`books/`, \"PATCH\", data)\r\n            .then(res => {\r\n                dispatch(patchBooksSuccess(res))\r\n            })\r\n            .catch(error => {\r\n                dispatch(patchBooksFailure(error.message))\r\n            })\r\n    }\r\n}\r\n\r\nexport const deleteBooksLoading = () => {\r\n    return {\r\n        type: actionTypes.DELETE_BOOK_LOADING\r\n    }\r\n}\r\n\r\nexport const deleteBooksSuccess = (books) => {    \r\n    return {\r\n        type: actionTypes.DELETE_BOOK_SUCCESS,\r\n        books\r\n    }\r\n}\r\n\r\nexport const deleteBooksFailure = (error) => {\r\n    return {\r\n        type: actionTypes.DELETE_BOOK_FAILURE,\r\n        error\r\n    }\r\n}\r\n\r\nexport const deleteBooks = () => {\r\n    return dispatch => {\r\n        dispatch(deleteBooksLoading())\r\n        jsonApi(`books/`, \"DELETE\", id)\r\n            .then(res => {\r\n                dispatch(deleteBooksSuccess(res))\r\n            })\r\n            .catch(error => {\r\n                dispatch(deleteBooksFailure(error.message))\r\n            })\r\n    }\r\n}\r\n\r\nexport const fetchCoversLoading = () => {\r\n    return {\r\n        type: actionTypes.FETCH_COVERS_LOADING\r\n    }\r\n}\r\n\r\nexport const fetchCoversSuccess = (covers) => {    \r\n    return {\r\n        type: actionTypes.FETCH_COVERS_SUCCESS,\r\n        covers\r\n    }\r\n}\r\n\r\nexport const fetchCoversFailure = (error) => {\r\n    return {\r\n        type: actionTypes.FETCH_COVERS_FAILURE,\r\n        error\r\n    }\r\n}\r\n\r\nexport const fetchCovers = () => {\r\n    return dispatch => {\r\n        dispatch(fetchCoversLoading())\r\n        jsonApi(`covers/`)\r\n            .then(res => {\r\n                dispatch(fetchCoversSuccess(res))\r\n            })\r\n            .catch(error => {\r\n                dispatch(fetchCoversFailure(error.message))\r\n            })\r\n    }\r\n}","C:\\workspace\\bookshelf\\front_bookshelf\\src\\constants\\actionType.js",[],"C:\\workspace\\bookshelf\\front_bookshelf\\src\\middleware\\api.js",[],["77","78"],"C:\\workspace\\bookshelf\\front_bookshelf\\src\\store\\configureStore.js",[],"C:\\workspace\\bookshelf\\front_bookshelf\\src\\reducers\\index.js",[],"C:\\workspace\\bookshelf\\front_bookshelf\\src\\components\\Alerts.js",[],"C:\\workspace\\bookshelf\\front_bookshelf\\src\\components\\ModalOperations.js",["79","80","81","82","83"],"import React, {useState} from 'react'\r\nimport { Modal, Button, ModalHeader, ModalFooter, ModalBody, Input, Label } from 'reactstrap'\r\nimport config from \"../config/dev.env.json\"\r\nconst { STATIC_IMAGES_URL }  =  config\r\n\r\nconst ModalOperations = (props) => {\r\n    const { isOpen, toggle, onApply, modalOperationsType , bookInfo, currentCover} = props\r\n    const [bookNewInfo, setBook] = useState({title: \"\", description: \"\", cover: \"\"});\r\n\r\n    const handleChanche = (key, value) => {\r\n        setBook({ ...bookNewInfo, [key]: value})\r\n    }\r\n\r\n    return (\r\n        <Modal isOpen={isOpen} toggle={() => toggle('modalOperationsVisible')}>\r\n            <ModalHeader toggle={ () => toggle( 'modalOperationsVisible' ) }>\r\n                Book operation - {modalOperationsType}\r\n            </ModalHeader>\r\n            <ModalBody>\r\n                {modalOperationsType == \"new\" ? showNewBook(setBook, handleChanche) : null}\r\n                {modalOperationsType == \"edit\" ? showEditBook(bookInfo, currentCover, handleChanche) : null}\r\n                {modalOperationsType == \"remove\" ? showRemoveBook(bookInfo, currentCover) : null}\r\n            </ModalBody>\r\n            <ModalFooter>\r\n                <Button color=\"primary\" onClick={() => {\r\n                    onApply(modalOperationsType, bookNewInfo)\r\n                }}>\r\n                    {ucFirst(modalOperationsType)}\r\n                </Button>{' '}\r\n                <Button color=\"secondary\" onClick={() => toggle('modalOperationsVisible')}>Cancel</Button>\r\n            </ModalFooter>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default ModalOperations\r\n\r\nconst showNewBook = (setBook, handleChanche) => {\r\n    return(\r\n        <>\r\n            <Label for=\"Title\">Title</Label>\r\n            <Input type=\"text\" name=\"Title\" id=\"Title\" onChange={(event) => handleChanche( \"title\",  event.target.value)}/>\r\n            <Label for=\"Description\">Description</Label>\r\n            <Input type=\"textarea\" name=\"Description\" id=\"Description\"   onChange={(event) => handleChanche( \"description\", event.target.value)} />\r\n            <Label for=\"cover\">Upload cover</Label>\r\n            <Input type=\"file\" name=\"cover\" id=\"cover\" />\r\n        </>\r\n    ) \r\n}\r\n\r\nconst showEditBook = (bookInfo, currentCover, handleChanche) => {\r\n    return(\r\n        <>\r\n            <Label for=\"Title\">Title</Label>\r\n            <Input type=\"text\" name=\"Title\" id=\"Title\" onChange={(event) => handleChanche(\"title\", event.target.value)} defaultValue={bookInfo.title}/>\r\n            <Label for=\"Description\">Description</Label>\r\n            <Input type=\"textarea\" name=\"Description\" id=\"Description\"  onChange={(event) => handleChanche( \"description\", event.target.value)} defaultValue={bookInfo.description}/>\r\n            <Label for=\"cover\">Upload new cover</Label>\r\n            <Input type=\"file\" name=\"cover\" id=\"cover\" />\r\n            <img width=\"200\" style={styleImage} src={ STATIC_IMAGES_URL + currentCover.name} />\r\n        </>\r\n    ) \r\n}\r\n\r\nconst showRemoveBook = (bookInfo, currentCover) => {\r\n    return(\r\n        <>\r\n            Remove this book - \"{bookInfo.title}\" ?\r\n            <img width=\"200\" style={styleImage}  src={ STATIC_IMAGES_URL + currentCover.name} />\r\n        </>\r\n    ) \r\n}\r\n\r\nconst ucFirst = (str) => {\r\n    if (!str) return str;\r\n    return str[0].toUpperCase() + str.slice(1);\r\n}\r\n\r\nconst styleImage = {\r\n        display: \"block\",\r\n        marginLeft: \"auto\",\r\n        marginRight: \"auto\",\r\n        marginTop: 25\r\n}",{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"84","replacedBy":"88"},{"ruleId":"86","replacedBy":"89"},{"ruleId":"90","severity":1,"message":"91","line":24,"column":25,"nodeType":"92","endLine":24,"endColumn":82},{"ruleId":"90","severity":1,"message":"91","line":20,"column":41,"nodeType":"92","endLine":20,"endColumn":170},{"ruleId":"93","severity":1,"message":"94","line":20,"column":144,"nodeType":"95","messageId":"96","endLine":20,"endColumn":146},{"ruleId":"93","severity":1,"message":"94","line":33,"column":69,"nodeType":"95","messageId":"96","endLine":33,"endColumn":71},{"ruleId":"93","severity":1,"message":"94","line":39,"column":73,"nodeType":"95","messageId":"96","endLine":39,"endColumn":75},{"ruleId":"93","severity":1,"message":"94","line":61,"column":34,"nodeType":"95","messageId":"96","endLine":61,"endColumn":36},{"ruleId":"93","severity":1,"message":"94","line":62,"column":47,"nodeType":"95","messageId":"96","endLine":62,"endColumn":49},{"ruleId":"97","severity":1,"message":"98","line":100,"column":9,"nodeType":"99","messageId":"100","endLine":107,"endColumn":10},{"ruleId":"101","severity":2,"message":"102","line":60,"column":35,"nodeType":"103","messageId":"104","endLine":60,"endColumn":39},{"ruleId":"101","severity":2,"message":"102","line":93,"column":36,"nodeType":"103","messageId":"104","endLine":93,"endColumn":40},{"ruleId":"101","severity":2,"message":"105","line":126,"column":37,"nodeType":"103","messageId":"104","endLine":126,"endColumn":39},{"ruleId":"84","replacedBy":"106"},{"ruleId":"86","replacedBy":"107"},{"ruleId":"93","severity":1,"message":"94","line":20,"column":38,"nodeType":"95","messageId":"96","endLine":20,"endColumn":40},{"ruleId":"93","severity":1,"message":"94","line":21,"column":38,"nodeType":"95","messageId":"96","endLine":21,"endColumn":40},{"ruleId":"93","severity":1,"message":"94","line":22,"column":38,"nodeType":"95","messageId":"96","endLine":22,"endColumn":40},{"ruleId":"90","severity":1,"message":"91","line":60,"column":13,"nodeType":"92","endLine":60,"endColumn":96},{"ruleId":"90","severity":1,"message":"91","line":69,"column":13,"nodeType":"92","endLine":69,"endColumn":97},"no-native-reassign",["108"],"no-negated-in-lhs",["109"],["108"],["109"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-undef","'data' is not defined.","Identifier","undef","'id' is not defined.",["108"],["109"],"no-global-assign","no-unsafe-negation"]